<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<!-- dev.mvc.points.CateDAOInter 패키지에 등록된 interface 명시,
      패키지명과 인터페이스명은 실제로 존재해야함,
      Spring이 내부적으로 자동으로 interface를 구현해줌. -->
<mapper namespace="dev.mvc.points.PointsDAOInter">

  <insert id="create_acc" parameterType="PointsVO">
    <!-- 등록후 OrdersVO class의 ordersno 컬럼에 PK return  -->
    <selectKey keyProperty="pointsno" resultType="int" order="BEFORE"> 
      SELECT points_seq.nextval FROM dual
    </selectKey>
    INSERT INTO points(pointsno, memberno, ordersno, contents, point_change, points_date)
    VALUES(#{pointsno}, #{memberno}, #{ordersno}, #{contents}, #{point_change}, sysdate)
  </insert>
  
  <insert id="create_use" parameterType="PointsVO">
    <!-- 등록후 OrdersVO class의 ordersno 컬럼에 PK return  -->
    <selectKey keyProperty="pointsno" resultType="int" order="BEFORE"> 
      SELECT points_seq.nextval FROM dual
    </selectKey>
    INSERT INTO points(pointsno, memberno, ordersno, contents, point_change, points_date)
    VALUES(#{pointsno}, #{memberno}, #{ordersno}, #{contents}, -#{point_change}, sysdate)
  </insert>
  
  <!-- 조회, id: read, 입력: pointsno, 리턴: PointsVO -->
  <select id="read_memberno" resultType="PointsVO" parameterType="int">
    SELECT pointsno, memberno, ordersno, contents, point_change, points_date
    FROM points
    WHERE  memberno=#{memberno}
  </select>
  
   <update id="update" parameterType="PointsVO">
      UPDATE points
      SET cnt=#{cnt}, pay=#{pay}
      WHERE pointsno=#{pointsno}
   </update>
    
  <!-- 삭제, id: delete, 입력: PK, 삭제된 개수: int -->
  <delete id="delete" parameterType="int">
    DELETE FROM points
    WHERE pointsno=#{pointsno}
  </delete>
  
  <delete id="delete_memberno" parameterType="int">
    DELETE FROM points
    WHERE memberno=#{memberno}
  </delete>
  
     <!-- 더보기 버튼 페이징 구현 -->
  <select id="list_add_view" resultType="PointsVO" parameterType="HashMap">
    SELECT pointsno, memberno, ordersno, contents, point_change, points_date, r
    FROM (
        SELECT pointsno, memberno, ordersno, contents, point_change, points_date, rownum as r
        FROM points)
    WHERE <![CDATA[ r >= #{startNum} AND r <= #{endNum} ]]>
  </select>
  

</mapper>